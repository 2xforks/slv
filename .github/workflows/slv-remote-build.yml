name: SLV Tests and Release

on:
  push:
    branches: ["main"]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (without v prefix)'
        required: true
        default: '0.6.0'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Run tests
        run: deno task test

  remote-build:
    name: Remote Build and Release
    needs: test
    if: success() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Extract version from tag or input
        id: get_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          fi

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BUILD_SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.BUILD_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Update inventory file
        run: |
          sed -i "s/<BUILD_SERVER_IP>/${{ secrets.BUILD_SERVER_IP }}/g" ansible/inventory.yml

      - name: Setup build server
        run: |
          ansible-playbook -i ansible/inventory.yml ansible/setup-build-server.yml

      - name: Compile SLV on remote server
        run: |
          ansible-playbook -i ansible/inventory.yml ansible/compile-slv.yml \
            -e "version=${{ env.VERSION }}" \
            -e "github_token=${{ secrets.GITHUB_TOKEN }}" \
            -e "cloudflare_account_id=${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" \
            -e "cloudflare_api_token=${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -e "cloudflare_email=${{ secrets.CLOUDFLARE_EMAIL }}" \
            -e "cloudflare_api_key=${{ secrets.CLOUDFLARE_API_KEY }}" \
            -e "cloudflare_zone_id=${{ secrets.CLOUDFLARE_ZONE_ID }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: |
            artifacts/slv-x86_64-unknown-linux-gnu-exe.tar.gz
          body: |
            SLV v${{ env.VERSION }} Release (Remote Build)
            
            ## Changes
            
            - See commit history for details
